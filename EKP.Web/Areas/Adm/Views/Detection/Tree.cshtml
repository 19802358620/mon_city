<div class="portlet light">
    <div class="portlet-body">
        <div class="row">
            <div class="col-md-3">
                <div class="portlet">
                    <div class="portlet-title">
                        <div class="caption">
                            <i class="fa fa-book"></i> 自我检测
                        </div>
                    </div>
                    <div class="portlet-body">
                        <button type="button" class="btn purple" onclick="initDetection()" id="btncreateDetectionNode" style="display:none">
                            <i class="fa fa-plus"></i>
                            新增
                        </button>
                        <div id="detectionTree"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div id="detectionSubjectBox" class="exercises">
                    <div class="exercises-list">
                        <div class="load" style="display:none">
                            <img src="/Areas/Adm/Images/loading_5.gif">
                        </div>
                        <div class="empty" style="display:none">
                            当前不存在题目，<a href="javascript:openCreateDetectionSubject();">点击立即创建</a>
                        </div>
                        <div class="con" style="display:none">
                            <div class="tool margin-bottom-10 margin-top-10">
                                <button class="btn btn-primary toolbar-datas" onclick="openCreateDetectionSubject()"><i class="fa fa-plus"></i> 添加</button>
                            </div>
                            <ul class="subjectBox" id="subjectBox"></ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link href="/Areas/Base/Content/subject.css" rel="stylesheet" />
<style>
    #detectionTree .jstree-anchor 
    {
        max-width: 80% !important;
        height:inherit !important;
        word-wrap:break-word !important;
        white-space:normal!important;
    }
</style>
<script src="/Areas/Base/Scripts/subject.js"></script>
<script>
    var selectDetection = null;

    //初始化
    $(function() {
        $("#detectionTree").jstree({
            core: {
                themes: {
                    "responsive": false
                },
                check_callback: true,
                data: {
                    url: getUrl("detection", "Tree", { ProjectId: selectNode.id }),
                    type: "POST",
                    dataType: "json",
                    success: function(data) {
                        if (data.length) {
                            $("#btncreateDetectionNode").hide();
                            $("#detectionSubjectBox").show();
                        } else {
                            $("#btncreateDetectionNode").show();
                            $("#detectionSubjectBox").hide();
                        }
                    }
                }
            },
            types: {
                "default": {
                    "icon": "fa fa-folder icon-state-warning icon-lg"
                },
                "file": {
                    "icon": "fa fa-file icon-state-warning icon-lg"
                }
            },
            state: { "key": "demo2" },
            plugins: ["contextmenu", "types"], //是否启用cookie
            contextmenu: {
                "items": function() {
                    var menu = $.jstree.defaults.contextmenu.items();
                    menu.ccp = null;
                    menu.rename.label = "重命名";
                    menu.remove = {
                        label: "删除",
                        action: function(data) { delDetection(data); }
                    };
                    menu.create = {
                        label: "创建",
                        submenu: [
                            { label: "同级节点", action: function(data) { createDetection(data, "peer"); } }
                        ]
                    }
                    return menu;
                }
            }
        }).bind("loaded.jstree", function(e, data) {
            data.instance.open_all();
            var inst = data.instance;
            var obj = inst.get_node(e.target.firstChild.firstChild && e.target.firstChild.firstChild.lastChild);
            inst.select_node(obj);
        }).bind("rename_node.jstree", function(e, data) {
            var id = data.node.id;
            var text = data.node.text;
            $.ajax({
                type: "POST",
                data: { name: text },
                dataType: "json",
                url: getUrl("detection", "Rename", { id: id }),
                success: function(backData) {
                    data.instance.refresh();
                    $dialogShow(backData);
                },
                error: function(e) {
                    data.instance.refresh();
                }
            });
        }).bind("select_node.jstree", function(n, data) {
            selectDetection = data.node;
            loadDetectionSubject(selectDetection);
        });
    });

    //初始化目录树
    function initDetection() {
        $.ajax({
            type: "POST",
            data: { ProjectId: selectNode.id },
            dataType: "json",
            url: getUrl("detection", "InitTree"),
            beforeSend: function() {
                layer.load(0, { shade: false });
            },
            success: function(data) {
                layer.closeAll("loading");
                $dialogShow(data);
                if (data.Type == "Success") {
                    setTimeout(function() {
                        $("#detectionTree").jstree("refresh");
                    }, 500);
                }
            }
        });
    }

    //添加节点（grade表示级数，peer表示同级节点，sub表示子级节点）
    function createDetection(data, grade) {
        var inst = jQuery.jstree.reference(data.reference),
            obj = inst.get_node(data.reference),
            parentId = obj.parent;
        var model = {
            ParentId: null,
            ProjectId: selectNode.id
        };
        if (grade == "peer")
            model.ParentId = parentId == "#" ? "" : parentId;
        else if (grade == "sub")
            model.ParentId = obj.id;
        $.ajax({
            type: "POST",
            data: { model: model },
            dataType: "json",
            url: getUrl("detection", "create"),
            success: function(backData) {
                $dialogShow(backData);
                if (grade == "sub")
                    obj.state.opened = true;
                $("#detectionTree").jstree("refresh");
            }
        });
    }

    //删除节点
    function delDetection(data, grade) {
        var inst = jQuery.jstree.reference(data.reference),
            obj = inst.get_node(data.reference),
            parentId = obj.parent;
        $.ajax({
            type: "POST",
            dataType: "json",
            url: getUrl("detection", "delete", { id: obj.id }),
            success: function(backData) {
                $dialogShow(backData);
                $("#detectionTree").jstree("refresh");
            }
        });
    }

    //加载题目
    function loadDetectionSubject(detection) {
        $.ajax({
            type: "post",
            dataType: "json",
            data: { DetectionId: detection.id, Page: 1, PageSize: 999 },
            url: getUrl("Subject", "Pager"),
            beforeSend: function () {
                $("#detectionSubjectBox .load").show();
                $("#detectionSubjectBox .empty").hide();
                $("#detectionSubjectBox .con").hide();
                $("#detectionSubjectBox .subjectBox").html("");
            },
            success: function (data) {
                $("#detectionSubjectBox .load").hide();

                var rows = data.Rows;
                if (rows.length) {
                    $("#detectionSubjectBox .empty").hide();
                    $("#detectionSubjectBox .con").show();
                    $(rows).each(function (i, subject) {
                        var subjectItem = $("<li class='subject_item' subjectId='{Id}'></li>".format(subject));
                        $("#subjectBox").append(subjectItem);

                        //初始化题目
                        ztsubject.init({
                            box: $(subjectItem),
                            subject: subject,
                            sNum: i + 1,
                            afterInit: function (opts) {
                                $(subjectItem).find(".subject-tool").show();
                                $(subjectItem).find(".subject-tool span")
                                    .append(
                                    '<button class="btn btn-sm btn-primary toolbar-datas" onclick="openEditDetectionSubject({Id})"><i class= "fa fa-edit"></i> 编辑</button >'.format(subject) +
                                    '<button class="btn btn-sm btn-primary toolbar-datas" onclick="deleteCourseSubject({Id})"><i class= "fa fa-trash"></i> 删除</button >'.format(subject));
                            }
                        });
                    });
                }
                else {
                    $("#detectionSubjectBox .empty").show();
                    $("#detectionSubjectBox .con").hide();
                }
            }
        });
    }

    //打开创建题目
    function openCreateDetectionSubject() {
        $.ajax({
            url: getUrl("Subject", "Create"),
            dataType: 'html',
            type: 'get',
            beforeSend: function () {
                layer.load(0, { shade: false });
            },
            success: function (html) {
                layer.closeAll("loading");
                layer.confirm(html, {
                    title: '<i class="fa fa-plus"></i> 添加试题',
                    area: ['1000px', '80%'],
                    zIndex: 99999,
                    btn: ['<i class="fa fa-save"></i>&nbsp;保存', '<i class="fa fa-times"></i>&nbsp;取消']
                }, function (v, box) {
                    saveSubjectCreate(function () {
                        loadDetectionSubject(selectDetection);
                    });
                });

                $("#subject-create-form *[name='DetectionId']").val(selectDetection.id);
            }
        });
    }

    //打开编辑题目
    function openEditDetectionSubject(subjectId) {
        var subject = ztsubject.getSubject(subjectId);
        var questions = ztsubject.getQuestions(null, subjectId);

        $.ajax({
            url: getUrl("Subject", "Edit"),
            dataType: 'html',
            type: 'get',
            beforeSend: function () {
                layer.load(0, { shade: false });
            },
            success: function (html) {
                layer.closeAll("loading");
                layer.confirm(html, {
                    title: '<i class="fa fa-plus"></i> 编辑试题',
                    area: ['1000px', '80%'],
                    btn: ['<i class="fa fa-save"></i>&nbsp;保存', '<i class="fa fa-times"></i>&nbsp;取消']
                }, function (v, box) {
                    saveSubjectEdit(function () {
                        loadDetectionSubject(selectDetection);
                    });
                });

                $('#subject-edit-form *[name="Id"]').val(subject.Id);
                $('#subject-edit-form *[name="DetectionId"]').val(subject.DetectionId);
                $("#subjectTypeBox a[type='{0}']".format(subject.Type)).trigger("click");
                KindEditor.html('#subject-edit-form *[name="Name"]', subject.Name);
                KindEditor.html('#subject-edit-form *[name="Analysis"]', subject.Analysis);
                if (subject.Type == "single") {
                    refreshSubjectColumns();
                    if (questions.length && questions[0].Options) {
                        var options = JSON.parse(questions[0].Options);
                        $(options).each(function (i, option) {
                            addColumn(null, { value: option });
                        });
                    }
                    if (questions[0].Answer) {
                        $("#answerSingle *[name='Answer']*[value='{0}']".format(questions[0].Answer)).attr("checked", "checked");
                    }
                    $("#selectFormBox *[name='OptionsColumns']").val(questions[0].OptionsColumns);
                }
                else if (subject.Type == "multi") {
                    refreshSubjectColumns();
                    if (questions.length && questions[0].Options) {
                        var options = JSON.parse(questions[0].Options);
                        $(options).each(function (i, option) {
                            addColumn(null, { value: option });
                        });
                    }
                    if (questions[0].Answer) {
                        $(questions[0].Answer.split("")).each(function (i, val) {
                            if (val) {
                                $("#answerMulti *[name='Answer']*[value='{0}']".format(val)).attr("checked", "checked");
                            }
                        });
                    }
                    $("#selectFormBox *[name='OptionsColumns']").val(questions[0].OptionsColumns);
                }
                else if (subject.Type == "bit") {
                    $("#answerBit *[name='Answer']").each(function (i, rd) {
                        if ($(rd).val() == questions[0].Answer) {
                            $(rd).attr("checked", "checked")
                        }
                    });
                }
                else if (subject.Type == "fill") {
                    $("#answerFill *[name='Answer']").val(questions[0].Answer);
                }
                else if (subject.Type == "shortAnswer") {
                    KindEditor.html('#answerShortAnswer *[name="Answer"]', questions[0].Answer);
                }
            }
        });
    }

    //删除题目
    function deleteCourseSubject(subjectId) {
        layer.confirm("确定要删除题目吗？", {
            title: "",
            btn: ['确认', '取消']
        }, function (v, box) {
            layer.closeAll();
            $.ajax({
                type: "post",
                dataType: "json",
                data: { ids: [subjectId] },
                url: getUrl("Subject", "Delete"),
                success: function (data) {
                    $dialogShow(data);
                    if (data.Type == "Success") {
                        setTimeout(function () {
                            loadDetectionSubject(selectDetection);
                        }, 500);
                    }
                }
            });
        });
    }
</script>
